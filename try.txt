from hashids import Hashids
url_id=14
hashids = Hashids(min_length=4, salt='dada bhagwan')
hashid = hashids.encode(url_id)
print(hashid)
id=hashids.decode(hashid)
print(id)
hashid='dada'
id=hashids.decode(hashid)
print(id)
from flask import Flask
from flask import Flask, render_template, request, flash, redirect, url_for
from flaskext.mysql import MySQL
from hashids import Hashids
app = Flask(__name__)

app.config['SECRET_KEY'] = 'dada bhagwan'
hashids = Hashids(min_length=4, salt=app.config['SECRET_KEY'])

mysql = MySQL()
app.config['MYSQL_DATABASE_USER'] = 'krupal'
app.config['MYSQL_DATABASE_PASSWORD'] = '1234'
app.config['MYSQL_DATABASE_DB'] = 'be'
app.config['MYSQL_DATABASE_HOST'] = 'localhost'
mysql.init_app(app)
print('------------------------------------------------------------')
""" conn = mysql.connect()
cursor = conn.cursor()
data = cursor.execute('SELECT * FROM urls ')
data = cursor.fetchall()
print(data)
conn.commit()
conn.close() """


@app.route('/', methods=('GET', 'POST'))
def index():
    conn = mysql.connect()
    cursor = conn.cursor()
    if request.method == 'POST':
        data=dict(request.form)
        url =data['url'] 
        custom=data['custom']
        print(url,custom)
        data = cursor.execute('SELECT extend FROM urls WHERE extend = (%s)', (custom,))
        data = cursor.fetchone()
        print('<<<<<<<<<<<<<<<<<<<<<<,',data[0])
        if data[0]!='':
            flash('set other custom url !')
            return redirect(url_for('index'))
        if not url:
            flash('The URL is required!')
            return redirect(url_for('index'))

        url_id = cursor.execute('select id from urls ORDER BY id desc')
        url_id =cursor.fetchall()
        url_id=url_id[0]
        url_id=url_id[0]
        print('?????????????????????',url_id)
        if custom=='':
            hashid = hashids.encode(url_id)
            short_url = request.host_url + hashid
        else:
            short_url = request.host_url + custom
            hashid=custom
        url_data = cursor.execute(
            'INSERT INTO urls (original_url,new_url,extend) VALUES (%s,%s,%s)', (url, short_url, hashid))
        
        conn.commit()
        conn.close()
        return render_template('index.html', short_url=short_url)

    return render_template('index.html')


@app.route('/<id>')
def url_redirect(id):
    print(id)
    conn = mysql.connect()
    cursor = conn.cursor()
    #original_id = hashids.decode(id)
    original_id=id
    print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', original_id)
    if original_id:
        #original_id = original_id[0]+1
        print('>>>>>>>>>>>>>666666666666666666>>>>>>>>>>>>>>>>>>', original_id)
        data = cursor.execute('SELECT * FROM urls WHERE extend = (%s)', (original_id,))
        data = cursor.fetchone()
        print(data)
        id=data[0]
        original_url = data[2]
        click = data[3]
        new_url=data[4]
        extend=data[5]
        cursor.execute('UPDATE urls SET click = (%s) WHERE extend = (%s)',(click+1, original_id))
        cursor.execute(
            'INSERT INTO views (id,original_url,new_url,extend) VALUES (%s,%s,%s,%s)', (id,original_url,new_url, extend))
        
        conn.commit()
        conn.close()
        return redirect(original_url)
    else:
        flash('Invalid URL')
        return redirect(url_for('index'))

@app.route('/stats')
def stats():
    conn = mysql.connect()
    cursor = conn.cursor() 
    db_urls = cursor.execute('SELECT * FROM urls')
    db_urls=cursor.fetchall()
    conn.close()
    print('+++++++++++++++++++++++++++++++++++++++++++++',db_urls)
    urls = list(db_urls)
    """ for url in db_urls:
        url = dict(url)
        url['short_url'] = request.host_url + hashids.encode(url['id'])
        urls.append(url) """
    print('+++++++++++++++++++++++++++++++++++++++++++++',urls)
    return render_template('stats.html', urls=urls)
@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/delete/<string:id>',methods = ['POST', 'GET'])
def delete(id):
    id=int(id)
    conn = mysql.connect()
    cursor = conn.cursor()
    cursor.execute('delete from urls  where id= (%s)', (id,))    
    conn.commit()
    conn.close()
    return redirect(url_for('stats'))
if __name__ == '__main__':
    app.run(debug=True)
from flask import Flask
from flask import Flask, render_template, request, flash, redirect, url_for
from flaskext.mysql import MySQL
from hashids import Hashids
app = Flask(__name__)

app.config['SECRET_KEY'] = 'dada bhagwan'
hashids = Hashids(min_length=4, salt=app.config['SECRET_KEY'])

mysql = MySQL()
app.config['MYSQL_DATABASE_USER'] = 'krupal'
app.config['MYSQL_DATABASE_PASSWORD'] = '1234'
app.config['MYSQL_DATABASE_DB'] = 'be'
app.config['MYSQL_DATABASE_HOST'] = 'localhost'
mysql.init_app(app)
print('------------------------------------------------------------')

@app.route('/', methods=('GET', 'POST'))
def index():
    conn = mysql.connect()
    cursor = conn.cursor()
    if request.method == 'POST':
        data=dict(request.form)
        url =data['url'] 
        custom=data['custom']
        data = cursor.execute('SELECT extend FROM urls WHERE extend = (%s)', (custom,))
        data = cursor.fetchone()
        data1 = cursor.execute('SELECT id FROM urls ')
        data1= cursor.fetchall()
        print('..............................................',data1)
        if data1 is None:
            print('-----------------------------------')
            url_id=1
            if custom=='':
                hashid = hashids.encode(url_id)
                short_url = request.host_url + hashid
            else:
                short_url = request.host_url + custom
                hashid=custom
            print('****************')
            print(url_id,url, short_url, hashid)
            url_data = cursor.execute('INSERT INTO urls (id,original_url,new_url,extend) VALUES (%s,%s,%s,%s)', (url_id,url, short_url, hashid))
            conn.commit()
            conn.close()
            return render_template('index.html', short_url=short_url)
                  
        else:
            print('++++++++++++++++++++++++++++++++++++ ')
            url_id = cursor.execute('select id from urls ORDER BY id desc')
            url_id =cursor.fetchall()   
            url_id=url_id[0]
            url_id=url_id[0]
            if data[0]!='':
                flash('set other custom url !')
                return redirect(url_for('index'))
            if custom=='':
                hashid = hashids.encode(url_id)
                short_url = request.host_url + hashid
            else:
                short_url = request.host_url + custom
                hashid=custom
            url_data = cursor.execute('INSERT INTO urls (original_url,new_url,extend) VALUES (%s,%s,%s)', (url, short_url, hashid))
            conn.commit()
            conn.close()
            return render_template('index.html', short_url=short_url)

    return render_template('index.html')


@app.route('/<id>')
def url_redirect(id):
    conn = mysql.connect()
    cursor = conn.cursor()
    original_id=id
    if original_id:
        data = cursor.execute('SELECT * FROM urls WHERE extend = (%s)', (original_id,))
        data = cursor.fetchone()
        id=data[0]
        original_url = data[2]
        click = data[3]
        new_url=data[4]
        extend=data[5]
        cursor.execute('UPDATE urls SET click = (%s) WHERE extend = (%s)',(click+1, original_id))
        cursor.execute(
            'INSERT INTO views (id,original_url,new_url,extend) VALUES (%s,%s,%s,%s)', (id,original_url,new_url, extend))
        
        conn.commit()
        conn.close()
        return redirect(original_url)
    else:
        flash('Invalid URL')
        return redirect(url_for('index'))

@app.route('/stats')
def stats():
    conn = mysql.connect()
    cursor = conn.cursor() 
    db_urls = cursor.execute('SELECT * FROM urls')
    db_urls=cursor.fetchall()
    conn.close()
    urls = list(db_urls)
    return render_template('stats.html', urls=urls)
@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/delete/<string:id>',methods = ['POST', 'GET'])
def delete(id):
    id=int(id)
    conn = mysql.connect()
    cursor = conn.cursor()
    cursor.execute('delete from urls  where id= (%s)', (id,))    
    conn.commit()
    conn.close()
    return redirect(url_for('stats'))
if __name__ == '__main__':
    app.run(debug=True)
 <!--    var chart = new CanvasJS.Chart("chartContainer",
    {
      title:{
        text: "Simple Date-Time Chart"
    },
    axisX:{
        title: "timeline",
        gridThickness: 2
    },
    axisY: {
        title: "Downloads"
    },
    data: [
    {        
        type: "area",
        dataPoints: arrayOfArrays
        
    }
    ]
});

    chart.render();
} -->
var arrayOfArrays = {{data | tojson}};
        console.log(arrayOfArrays)
        document.getElementById("result").innerHTML = arrayOfArrays;
        var array=[]
        var array2=[]
        var i;
        var text='';
        for(i=0;i<arrayOfArrays.length;i++){
            text += arrayOfArrays[i][0] + "<br>";
            array.push(arrayOfArrays[i][0])
            array2.push(arrayOfArrays[i][1])
        }
        document.getElementById("demo").innerHTML = text;
        document.getElementById("demo2").innerHTML = array2;
        var dps=[]
        for (var i = 0; i <= array2.length; i++){
                  dps.push({x:array[i],  y: array[i]});     
             }


             window.onload = function () {
             var chart = new CanvasJS.Chart("chartContainer", {
                 title:{
                     text: "My First Chart in CanvasJS"              
                 },
                 data: [              
                 {
                     type: "column",
                     dataPoints: dps
                 }
                 ]
             });
             chart.render();
         }